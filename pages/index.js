import Head from 'next/head';
import {
  ApolloProvider,
  ApolloClient,
  InMemoryCache,
  gql,
} from '@apollo/client';
import { Button, Card, Row, Col } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import styles from '../styles/Home.module.css';
import { useState } from 'react';

const client = new ApolloClient({
  uri: 'https://api.spacex.land/graphql/',
  cache: new InMemoryCache(),
});

const CONFIG = {
  limit: 10,
};

const getQuery = (page) => {
  return gql`
  query GetLaunches {
    launchesPast(limit: ${CONFIG.limit}, offset: ${page * CONFIG.limit}) {
      id
      mission_name
      details
      launch_date_local
      launch_site {
        site_name_long
      }
      links {
        article_link
        video_link
        mission_patch
        flickr_images
      }
      rocket {
        rocket_name
      }
    }
  }
`;
};

const Launches = ({ launches }) => (
  <Row xs={1} md={4} className="g-4">
    {launches.map((launch) => {
      const {
        mission_name: missionName,
        launch_date_local: launchDate,
        details,
        id,
        links: { video_link: videoURL },
      } = launch;
      const imageURL =
        launch.links.flickr_images[0] || launch.links.mission_patch;
      return (
        <Col key={id}>
          <a href={videoURL} target="_blank" className={styles.link}>
            <Card className={styles.card}>
              <Card.Img variant="top" src={imageURL} />
              <Card.Body>
                <Card.Title>{missionName}</Card.Title>
                <Card.Text>
                  <strong>
                    Launch Date:{' '}
                    {new Date(launchDate).toLocaleDateString('en-US')}
                  </strong>{' '}
                  <br></br>
                  {details}
                </Card.Text>
              </Card.Body>
            </Card>
          </a>
        </Col>
      );
    })}
  </Row>
);

export default function Home({ initialLaunches }) {
  const [launches, setLaunches] = useState(initialLaunches);
  const [page, setPage] = useState(1);

  const handleClick = async (e) => {
    const { data } = await client.query({
      query: getQuery(page),
    });

    const { launchesPast } = data;

    if (launchesPast === undefined || data.launchesPast.length === 0) {
      setPage('');
      return;
    }

    const allLaunches = [...launches, ...launchesPast];
    setLaunches(allLaunches);
    setPage(page + 1);
  };

  return (
    <ApolloProvider client={client}>
      <div>
        <Head>
          <title>SpaceX Launches</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>SpaceX Launches</h1>
          <p className={styles.description}>Latest launches from SpaceX</p>
          {launches ? (
            <Launches launches={launches} />
          ) : (
            <p className={styles.description}>Loading...</p>
          )}

          <Button
            className={styles.button}
            onClick={handleClick}
            disabled={!Boolean(page)}
          >
            Load more
          </Button>
        </main>

        <footer className={styles.footer}>Made by JuanG</footer>
      </div>
    </ApolloProvider>
  );
}

export async function getStaticProps() {
  const { data } = await client.query({
    query: getQuery(0),
  });

  return {
    props: {
      initialLaunches: data.launchesPast,
    },
  };
}
